# -*- coding: utf-8 -*-
"""deteksi-apd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eEb0xLvFCSf4DsOShI8tiiO94H7FWQCM

# 1. Import Modul dan Model

- Menampilkan informasi tentang GPU NVIDIA yang terpasang di sistem
"""

!nvidia-smi

"""- Melakukan proses instalasi modul `roboflow` sehingga dapat dilakukan proses download dataset pada laman tersebut"""

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="BS1qBAWgkWEmq6PCikBR")
project = rf.workspace("roboflow-universe-projects").project("construction-site-safety")
version = project.version(28)
dataset = version.download("yolov8")

"""- Melakukan proses instalasi modul `ultralytics`"""

!pip install ultralytics

"""- Melakukan proses import model `YOLO` melalui modul `ultralytics`"""

from ultralytics import YOLO

"""# 2. Proses Pelatihan dan Pengujian Model YOLO

- Import Modul yang Diperlukan untuk Download File/Folder
"""

import shutil
from google.colab import files

"""## Model YOLOv8s (*small*)

### Pelatihan Model
"""

!yolo task=detect mode=train model=yolov8s.pt data=/content/Construction-Site-Safety-28/data.yaml epochs=50 imgsz=640

"""### Pengujian Model yang Terbaik (`best.pt`)"""

!yolo task=detect mode=val model=/content/runs/detect/train2/weights/best.pt data=/content/Construction-Site-Safety-28/data.yaml

"""### Menyimpan Hasil Pelatihan dan Pengujian Model"""

downloaded_file_path = '/content/runs/detect/train2'
shutil.make_archive(downloaded_file_path, 'zip', downloaded_file_path)
files.download(downloaded_file_path + '.zip')

"""## Model YOLOv8m (*medium*)

### Pelatihan Model
"""

!yolo task=detect mode=train model=yolov8m.pt data=/content/Construction-Site-Safety-28/data.yaml epochs=50 imgsz=640

"""### Pengujian Model yang Terbaik"""

!yolo task=detect mode=val model=/content/runs/detect/train3/weights/best.pt data=/content/Construction-Site-Safety-28/data.yaml

"""### Menyimpan Hasil Pelatihan dan Pengujian Model"""

downloaded_file_path = "/content/runs/detect/train3"
shutil.make_archive(downloaded_file_path, 'zip', downloaded_file_path)
files.download(downloaded_file_path + '.zip')

"""## Pelatihan Model YOLOv8l (*large*)

### Pelatihan Model
"""

!yolo task=detect mode=train model=yolov8l.pt data=/content/Construction-Site-Safety-28/data.yaml epochs=50 imgsz=640

"""### Pengujian Model yang Terbaik"""

!yolo task=detect mode=val model=/content/runs/detect/train/weights/best.pt data=/content/Construction-Site-Safety-28/data.yaml

"""### Menyimpan Hasil Pelatihan dan Pengujian Model"""

import shutil
from google.colab import files

downloaded_file_path = "/content/runs/detect/train"
shutil.make_archive(downloaded_file_path, 'zip', downloaded_file_path)
files.download(downloaded_file_path + '.zip')

"""# 3. Implementasi Model pada Data Video

- Melakukan deteksi APD pada sampel data video
"""

# Personal Protective Equipment (PPE) / Alat Pelindung Diri (APD)
!pip install cvzone
from google.colab.patches import cv2_imshow # Import cv2_imshow

from ultralytics import YOLO
import cv2
import cvzone
import math

# # Membuka file video
video_path = "/content/ppe-2-1.mp4"
cap = cv2.VideoCapture(video_path)


# Import model YOLO
model_path = "/content/best.pt"
model = YOLO(model_path)

# Menentukan jenis-jenis kategori/label data
classNames = ['Hardhat', 'Mask', 'NO-Hardhat', 'NO-Mask', 'NO-Safety Vest', 'Person', 'Safety Cone',
              'Safety Vest', 'machinery', 'vehicle']
myColor = (0, 0, 255)

# Cek apakah video berhasil dibuka
if not cap.isOpened():
    print("Error: Tidak dapat membuka video.")
    exit()

# Membatasi pengambilan video hanya pada 5 frame pertama
frame_count = 0
max_frame = 5

# Menjalankan video
while True:
    ret, frame = cap.read()  # Membaca frame dari video



    if not ret:
        print("Video selesai atau terjadi kesalahan.")
        break

    if frame_count == max_frame:
        break

    # Melakukan deteksi objek pada frame
    results = model(frame, stream=True)

    for r in results:
        boxes = r.boxes
        for box in boxes:
            # Bounding Box
            x1, y1, x2, y2 = box.xyxy[0]
            x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)

            w, h = x2 - x1, y2 - y1

            # Confidence Level
            conf = math.ceil((box.conf[0] *100)) / 100

            # Label Kategori
            cls = int(box.cls[0])
            currentClass = classNames[cls]
            print(currentClass)

            if conf > 0.5:
                if currentClass == 'NO-Hardhat' or currentClass == 'NO-Safety Vest' or currentClass == 'NO-Mask':
                    myColor = (0, 0, 255)
                    textColor = (255, 255, 255)
                elif currentClass == 'Hardhat' or currentClass == 'Safety Vest' or currentClass == 'Mask':
                    myColor = (0, 255, 0)
                    textColor = (0, 0, 0)
                else:
                    myColor = (255, 0, 0)
                    textColor = (255, 255, 255)

                #print(f'x1 = {x1} dan y1 ={y1}')
                cvzone.putTextRect(frame, f'{classNames[cls]} {conf}',
                                   (max(0, x1+5), max(35, y1-5)), scale=1, thickness=2,
                                   colorB=myColor,colorT=textColor, colorR=myColor, offset=8)
                cv2.rectangle(frame, (x1,y1), (x2,y2), myColor, 2)

    cv2_imshow(frame)  # Menampilkan frame dalam jendela
    frame_count = frame_count + 1

# Membersihkan sumber daya
cap.release()

